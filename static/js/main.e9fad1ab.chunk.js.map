{"version":3,"sources":["components/OpenModal.js","components/UserCard.js","components/Pagination.js","components/SearchData.js","components/FetchUserData.js","App.js","serviceWorker.js","index.js"],"names":["show","display","hide","Modal","props","className","style","this","user","first_name","last_name","email","onClick","handleModal","React","Component","UserCard","handleCardClick","setState","showModal","state","paddingLeft","Pagination","currentPage","usersPerPage","handleClick","bind","event","Number","target","id","indexOfLastUser","indexOfFirstUser","renderUsers","items","slice","map","index","pageNumbers","i","Math","ceil","length","push","renderPageNumbers","number","href","key","class","SearchData","filterList","updatedList","data","filter","item","toLowerCase","search","value","type","placeholder","onChange","marginTop","width","height","borderRadius","background","FetchUserData","isLoaded","fetch","then","res","json","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9fad1ab.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst show = {\r\n  display: \"block\",\r\n};\r\nconst hide = {\r\n  display: \"none\",\r\n};\r\n\r\nclass Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"modal\" style={this.props.show ? show : hide}>\r\n          <div className=\"modal-content\">\r\n            <h4>\r\n              First Name : {this.props.user.first_name}\r\n              <br />\r\n              Last Name : {this.props.user.last_name}\r\n              <br />\r\n              Email : {this.props.user.email}\r\n              <br />\r\n            </h4>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <a className=\"btn-flat\" onClick={() => this.props.handleModal()}>\r\n              Close\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport Modal from \"./OpenModal\";\r\nimport \"./DisplayUserData.css\";\r\n\r\nclass UserCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: false,\r\n    };\r\n  }\r\n  handleCardClick = () => {\r\n    this.setState(() => ({\r\n      showModal: !this.state.showModal,\r\n    }));\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"column\">\r\n        <div className=\"card\" onClick={() => this.handleCardClick()}>\r\n          <h3>\r\n            <p style={{ paddingLeft: \"20\" }}>{this.props.user.first_name}</p>\r\n          </h3>\r\n          <Modal\r\n            user={this.props.user}\r\n            show={this.state.showModal}\r\n            handleModal={this.handleCardClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserCard;\r\n","import React from \"react\";\r\nimport \"./DisplayUserData.css\";\r\nimport UserCard from \"./UserCard\";\r\n\r\nclass Pagination extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPage: 1,\r\n      usersPerPage: 4,\r\n      showModal: false,\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick(event) {\r\n    this.setState({\r\n      currentPage: Number(event.target.id),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { currentPage, usersPerPage } = this.state;\r\n\r\n    const indexOfLastUser = currentPage * usersPerPage;\r\n    const indexOfFirstUser = indexOfLastUser - usersPerPage;\r\n    const currentUsers = this.props.items.slice(\r\n      indexOfFirstUser,\r\n      indexOfLastUser\r\n    );\r\n\r\n    const renderUsers = currentUsers.map((user, index) => {\r\n      return <UserCard user={user} />;\r\n    });\r\n\r\n    const pageNumbers = [];\r\n    for (\r\n      let i = 1;\r\n      i <= Math.ceil(this.props.items.length / usersPerPage);\r\n      i++\r\n    ) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    const renderPageNumbers = pageNumbers.map((number) => {\r\n      return (\r\n        <a href=\"#\" key={number} id={number} onClick={this.handleClick}>\r\n          {number}\r\n        </a>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"row\">{renderUsers}</div>\r\n        <div class=\"pagination\">{renderPageNumbers}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport Pagination from \"./Pagination\";\r\nimport \"./FetchUserData.css\";\r\n\r\nclass SearchData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n    };\r\n  }\r\n  filterList = (event) => {\r\n    var updatedList = this.props.data;\r\n    updatedList = updatedList.filter(function (item) {\r\n      return (\r\n        item.first_name\r\n          .toLowerCase()\r\n          .search(event.target.value.toLowerCase()) !== -1\r\n      );\r\n    });\r\n    this.setState({ items: updatedList });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ items: this.props.data });\r\n  }\r\n\r\n  render() {\r\n    const searchcss = {\r\n      marginTop: \"7%\",\r\n      width: \"80\",\r\n      height: \"80\",\r\n      borderRadius: \"10%\",\r\n      background: \"rgb(230, 133, 230)\",\r\n    };\r\n    return (\r\n      <div className=\"mainBody\">\r\n        <div className=\"filter-list\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            onChange={this.filterList}\r\n            style={searchcss}\r\n          />\r\n          <Pagination items={this.state.items} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchData;\r\n","import React from \"react\";\r\nimport SearchData from \"./SearchData\";\r\n\r\nclass FetchUserData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      isLoaded: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://reqres.in/api/users?page=2\")\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          data: json.data,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return <SearchData data={this.state.data} />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default FetchUserData;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FetchUserData from \"./components/FetchUserData\";\nimport Modal from \"./components/OpenModal\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FetchUserData />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}